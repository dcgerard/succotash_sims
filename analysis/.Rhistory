library(succotashr)
source("../code/datamaker_gerard.R")
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
d_out <- datamaker(args_val)
num_sv <- d_out$meta$dfargs$num.sv
num_sv
num_sv <- d_out$meta$dfargs$num.sv
Y <- d_out$input$counts
X <- d_out$input$condition
X
X <- model.matrix(~d_out$input$condition)
X
Ycounts <- d_out$input$counts
X <- model.matrix(~d_out$input$condition)
Y <- t(log(as.matrix(Ycounts) + 1))
dim(Y)
dim(X)
source("chunk-options.R")
library(succotashr)
source("../code/datamaker_gerard.R")
set.seed(24254)
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
d_out <- datamaker(args_val)
num_sv <- d_out$meta$dfargs$num.sv
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1))
X <- model.matrix(~d_out$input$condition)
?succotashr
?succotash
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1) ## no regularization
suc_out_unif <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
mix_type = "uniform") ## no regularization
suc_out$tau_seq
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
set.seed(24254)
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
args_val$nullpi <- 0.5 ## true pi_0
d_out <- datamaker(args_val)
```
num_sv <- d_out$meta$dfargs$num.sv
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1) ## no regularization
suc_out_unif <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
mix_type = "uniform") ## no regularization
suc_out_unif <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
mix_type = "uniform") ## no regularization
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1, num_em_runs = 3) ## no regularization
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
suc_out10 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 10, num_em_runs = 3) ## no regularization
suc_out100 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 100, num_em_runs = 3) ## no regularization
suc_out200 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 200, num_em_runs = 3) ## no regularization
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h')
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h')
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h')
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
abline(h = 0.5, col = 2, lwd = 2, lty = 2)
args_val$nullpi <- 0.9 ## true pi_0
d_out <- datamaker(args_val)
num_sv <- d_out$meta$dfargs$num.sv
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1, num_em_runs = 3) ## no regularization
suc_out10 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 10, num_em_runs = 3) ## no regularization
suc_out100 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 100, num_em_runs = 3) ## no regularization
suc_out200 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 200, num_em_runs = 3) ## no regularization
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
abline(h = 0.5, col = 2, lwd = 2, lty = 2)
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h')
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 1")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 10")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 100")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 200")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
par(mfrow = c(2, 2))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 1")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 10")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 100")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 200")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
succotash_given_alpha()
succotash_given_alpha
succotash_em
length(suc_out$pi_vals)
?succotash
?succotash_given_alpha
?succotash
?succotash_em
?succotash_given_alpha
names(suc_out)
succotash
names(suc_out)
?succotash_given_alpha
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(0.9, 0.1))
suc_out_zero
names(suc_out_zero)
suc_out_zero$pi_vals
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(0.1, 0.9))
suc_out_zero$pi_vals
succotash_given_alpha(Y = Y1_scaled, alpha = alpha_scaled,
sig_diag = sig_diag_scaled, num_em_runs = num_em_runs,
em_z_start_sd = z_start_sd, lambda_type = lambda_type,
lambda0 = lambda0)
suc_out$alpha_scaled
class(suc_out$alpha_scaled)
dim(suc_out$alpha_scaled)
pi_init <- runif(1)
pi_init
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
print(suc_out_zero$pi_vals)
for(index in 1:10) {
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
cat("Iteration =", index,"\n")
cat("Pi0 =", suc_out_zero$pi_vals,"\n\n")
}
cat("Iteration =", index,"\n")
cat("  Pi0_hat =", suc_out_zero$pi_vals,"\n\n")
for(index in 1:10) {
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
cat("Iteration =", index,"\n")
cat("  Pi0_hat =", suc_out_zero$pi_vals,"\n\n")
}
for(index in 1:10) {
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
cat("Repetition =", index,"\n")
cat("   Pi0_hat =", suc_out_zero$pi_vals,"\n\n")
}
suc_out_zero$Z
succotash()
succotash
